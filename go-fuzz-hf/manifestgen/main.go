package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// Manifest –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç: —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ãs.
type Manifest struct {
	Functions []Function `json:"functions"`
}

type Function struct {
	Name string     `json:"name"`
	Args [][]string `json:"args"`
}

func main() {
	out := flag.String("out", "manifest.json", "–ü—É—Ç—å –∫ manifest.json –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–µ–≥–æ")
	flag.Parse()

	// –†–∞—Å—à–∏—Ä—è–µ–º '~' –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏
	path := *out
	if strings.HasPrefix(path, "~") {
		if home, err := os.UserHomeDir(); err == nil {
			path = filepath.Join(home, path[1:])
		}
	}

	// –ï—Å–ª–∏ out —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª manifest.json –≤ –Ω–µ–π
	if info, err := os.Stat(path); err == nil && info.IsDir() {
		path = filepath.Join(path, "manifest.json")
	}

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	dir := filepath.Dir(path)
	if err := os.MkdirAll(dir, 0755); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ %s: %v\n", dir, err)
		os.Exit(1)
	}

	// –ü—Ä–∏–º–µ—Ä –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
	example := Manifest{
		Functions: []Function{
			{Name: "InitLedger", Args: [][]string{}},
			{Name: "CreateAsset", Args: [][]string{
				{"asset1", "asset_üòÄ", "<long_id>", ""},
				{"blue", "red", ""},
				{"0", "1", "-1"},
				{"alice", "bob", ""},
				{"0", "1000", "-999"},
			}},
			{Name: "ReadAsset", Args: [][]string{{"asset1", "unknown", ""}}},
		},
	}

	data, err := json.MarshalIndent(example, "", "  ")
	if err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: %v\n", err)
		os.Exit(1)
	}

	if err := ioutil.WriteFile(path, data, 0644); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ %s: %v\n", path, err)
		os.Exit(1)
	}

	fmt.Printf("–®–∞–±–ª–æ–Ω manifest.json —Å–æ–∑–¥–∞–Ω –≤ %s\n", path)
}
